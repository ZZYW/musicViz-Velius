import peasy.*;
import peasy.org.apache.commons.math.*;
import peasy.org.apache.commons.math.geometry.*;
import peasy.test.*;

/**
 * This sketch demonstrates how to use an FFT to analyze
 * the audio being generated by an AudioPlayer.
 * <p>
 * FFT stands for Fast Fourier Transform, which is a 
 * method of analyzing audio that allows you to visualize 
 * the frequency content of a signal. You've seen 
 * visualizations like this before in music players 
 * and car stereos.
 * <p>
 * For more information about Minim and additional features, 
 * visit http://code.compartmental.net/minim/
 */

import ddf.minim.analysis.*;
import ddf.minim.*;

Minim       minim;
AudioPlayer jingle;
FFT         fft;

//PeasyCam cam;
PImage background;
PImage lightcube;
PImage scribble0;
PShader blur;

ArrayList<Float> line1;

void setup()
{

  size(800, 800, P3D);
  background(0);
  minim = new Minim(this);
  pixelDensity(2);
  blur = loadShader("blur.glsl"); 
  // specify that we want the audio buffers of the AudioPlayer
  // to be 1024 samples long because our FFT needs to have 
  // a power-of-two buffer size and this is a good size.
  jingle = minim.loadFile("Velius.mp3", 1024);

  // loop the file indefinitely
  jingle.loop();

  // create an FFT object that has a time-domain buffer 
  // the same size as jingle's sample buffer
  // note that this needs to be a power of two 
  // and that it means the size of the spectrum will be half as large.
  fft = new FFT( jingle.bufferSize(), jingle.sampleRate() );
  // calculate the averages by grouping frequency bands linearly. use 30 averages.
  fft.logAverages( 22, 2);
  //
  //cam = new PeasyCam(this, 100);
  //cam.setMinimumDistance(50);
  //cam.setMaximumDistance(5000);
  //
  background = loadImage("testbg.png");
  lightcube = loadImage("cube.png");
  scribble0 = loadImage("scribble.png");
  line1 = new ArrayList<Float>();
}
float bgRA = 0;
float cubeRA = 0;
float ytran = 0;
float sinAru = 0;
float eyeZ = (height/2.0) / tan(PI*30.0 / 180.0);
float ztr;

void draw()
{
  noStroke();

  fill(0, 5);
  rect(0, 0, width, height);



  // perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward( jingle.mix );

  float instr[] = new float[]{
    fft.getBand(11), //ding ling 
    fft.getBand(13), //ding ling 2
    fft.getBand(39), //echo 
    fft.getBand(1) //beat
  };

  if (instr[0]>6) {
    line1.add(instr[0]);
  } else {
    line1.clear();
  }


  pushMatrix();
  translate(width/2, height/2, 0);
  rotateX(radians(35));

  beginShape();

  for (int i=0; i<line1.size()-1; i++) {
    stroke(255, instr[3]*10);
    noFill();
    float mapped = map(line1.get(i), 0, 40, -50, 50);
    curveVertex(mapped, sin(i)*20, i);
  }

  sinAru+=0.01;
  endShape();
  popMatrix();

  //drawBands();
}

void drawBands() {
  int w = 20;
  for (int i=0; i<fft.specSize(); i++) {
    strokeWeight(w-1);
    stroke(255);
    line(i*w, height, i*w, height-fft.getBand(i));
    fill(255, 0, 0);
    textAlign(CENTER);
    textSize(6);
    text(i, i*w, height-20);
  }
  strokeWeight(0.5);
  stroke(0, 255, 0);

  for (int o=10; o<100; o+=10) {
    line(0, height-o, width, height-o);
  }
}